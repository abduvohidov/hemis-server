generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model UserModel {
  id       Int     @id @default(autoincrement())
  name     String
  lastName String
  email    String  @unique
  password String
  role     String
}

model Master {
  id                Int      @id @default(autoincrement())
  lastName          String
  firstName         String
  middleName        String
  passportNumber    String   @unique
  jshshr            String   @unique
  dateOfBirth       DateTime
  gender            String
  nationality       String
  email             String   @unique
  phoneNumber       String
  parentPhoneNumber String
  avatarUrl         String   @default("")
  password          String

  // References
  addresses Address[]
  education Education[] 
}

model Address {
  id        Int    @id @default(autoincrement())
  country   String
  region    String
  address   String
  masterId Int

  // References
  master Master @relation(fields: [masterId], references: [id], onDelete: Cascade)
}

model Education {
  id                    Int    @id @default(autoincrement())
  masterId              Int
  bachelorId            Int?
  currentSpecialization String
  facultyId             Int?
  course                String
  paymentType           String
  entryYear             String
  educationForm         String
  languageCertificate   String
  semester              String
  scientificSupervisor  String
  scientificAdvisor     String
  internshipSupervisor  String
  internalReviewer      String
  externamReviewer      String
  thesisTopic           String
  articlesId            Int?
  academicLeave         String
  scientificInternshipPlace String
  // References
  master  Master  @relation(fields: [masterId], references: [id], onDelete: Cascade)
  bachelor Bachelor? @relation(fields: [bachelorId], references: [id], onDelete: Cascade)
  faculty  Faculty?  @relation(fields: [facultyId], references: [id], onDelete: Cascade)
  articles Articles? @relation(fields: [articlesId], references: [id], onDelete: Cascade)
}

model Bachelor {
  id                     Int    @id @default(autoincrement())
  previousUniversity     String
  graduationYear         String
  diplomaNumber          String
  previousSpecialization String

  // References
  education Education[]
}

model Faculty {
  id   Int    @id @default(autoincrement())
  name String

  // References
  education Education[]
}

model Articles {
  id                   Int      @id @default(autoincrement())
  firstArticle         String
  firstArticleDate     DateTime
  firstArticleJournal  String
  secondArticle        String
  secondArticleDate    DateTime
  secondArticleJournal String
  // References
  education Education[]
}
